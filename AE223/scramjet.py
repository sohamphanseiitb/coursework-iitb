# -*- coding: utf-8 -*-
"""Scramjet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16bPKi7fJAw_Q9bXaMwohVeCxBws_-LmD

## Without Single Ramp Expansion
"""

'''Author: Soham S. Phanse
Roll number: 19D170030
Department of Aerospace Engineering
Indian Institute of Technology Bombay
AE223 - Scramjet Engine Analysis
We have a diverging area nozzle with the midplane as a solid wall due to the
waverider configuration. Now here we assume that the area profile contour is linear
with respect to the axial dimension. We treat the flow to be quasi-one-dimensional.
Hence we neglect any type of 2 dimensionality due to boundayr layers, friction.
Also, we assume that the nozzle walls are adiabatic and W_external = 0.'''
import numpy as np
import matplotlib.pyplot as plt
## Let us first fix the axis of observation. (Nozzle Axis)
x_axis = np.linspace(0,1,100)

## Let us consider the ramp angle of the nozzle be \theta. Also let us consider the
## throat area is A* (area where M=1). Considering x = 0 at the point where the flow
## enters the nozzle, we get that the A(x) =  A(0) + xtan(theta)
theta = np.pi/9 # 20 degrees
A_entry = 0.2572448937 # Area of cross section at the nozzle entry
Area = A_entry + x_axis*np.tan(theta)
#plt.plot(x_axis,Area,label="Nozzle Expansion Ramp")
#plt.plot(x_axis, 0*np.ones_like(x_axis), label="Midplane")
#plt.xlabel("Loaction on Nozzle Axis (in m) \u2192")
#plt.ylabel("Height from Midplane (in m) \u2192")
#plt.title("Area Profile of the Nozzle at \u0398 = 20 degrees")
#plt.xlim(0)
#plt.legend()
#plt.show()


'''We cinsider the catchment area of the scramjet to be the height of the intake.
Let Height = 1 and hence catchment area = 1. Also, we have that the height of the throat
is the height of the combustor section of the scramjet. Hence A* = throat Height

If we consider the combustor to be almost of uniform cross section we can conclude
that the throat area is equal to the area at the nozzle entry.'''

Astar = A_entry
#-------------------------------Yet to be changed ------------------------------
###### To relate the the area and mach number of a location we use the following relation
###### We plot it in a different by taking mach numbers as known and area of cross section as unknown.
gamma = 1.4 ###### Cp/Cv ratio of the gas, constant
Mach = np.linspace(1,3,100)
A = (Astar/Mach)*((2/gamma + 1)*(1 + ((gamma-1)*Mach*Mach/2)))**(gamma + 1/(2*(gamma - 1)))
#plt.plot(Mach, A)
#plt.axhline(y=1, label="Maximum Area Limit")
#plt.xlabel("Mach number \u2192")
#plt.ylabel("Area of cross section \u2192")
#plt.title(" Mach number variation with Area of cross section of diverging nozzle")
#plt.show()
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

## What we generally do is, we take an area profile as a function of x, then we
## use the formula to find the Mach number at loaction x. However what we do here is we first fix the
## mach number profile we want i.e M(0) = 1 and M(1) = 5 [length of the nozzle is say 1]
## then we set the mach number from 1 to 7 (say) and then find the area profile and to make the area profile
## linear we relate it to the x_axis equation. And if we want the area relation to hold then we need to
## take as given the mach number variation with loaction which can be or cannot be possible.

#### If we assume that at x=0 i.e at the combustor entry we have mach number = 1
#### and we want to have the mach number at the nozzle exit as 5. The exit area is constrained
#### by the catchment area of the nozzle ie. 1. Hence we have A_exit = 1 and A_entry = 0.5, M_entry = 1
#### and M_exit = 5. Also we have A(x) =  A(0) + x*tan(theta)
#### Hence we can substitute in the above formula to get the Mach number variation along the x_axis
def x(functiontheta):
    return (A - A_entry)/np.tan(functiontheta)
plt.plot(x(np.pi/9), Mach, label="\u0398 = 20") ## theta is the nozzle ramp angle
plt.plot(x(np.pi/6), Mach, label="\u0398 = 30")
plt.xlabel("Location on the Nozzle Axis (in m) \u2192")
plt.ylabel("Mach number \u2192")
plt.title(" Mach variation with Location on the Nozzle Axis for different values of \u0393")
plt.legend()
plt.show()

## We can easily that with a linear area profile it is practically impossible to have
## such a long nozzle, hence with a linear area profile we have some limitations so as to
## how much we can expand and achieve a high mach number jet.

#### Let us calculate what we can do with the existing area profile, where,
#### A(0) = A_entry = Astar =  A_throat = 0.5 and A(1) = 0.5 + tan(theta)
#### assuming the nozzle length = 1. And M(0) = 1 (assuming sonic flow at the combustor exit)
## we get, (1 +  2tan(theta))**(1/3) = (5*(M_exit )**(-1/3))/6 + M**(5/3)/6
## We now plot the variation of the mach number at exit with ramp angle

#### However we have a limit on the A_exit i.e A(1) = area of catchment area. Hence the
#### maximum value of A_exit of nozzle is 1. Hence A(1) = A(0) + 1*tan(theta)
#### 1 = 0.5 + tan(theta); tan(theta) = 0.5
#### As tan(theta) is an increasing function from 0 to pi/2 we get that,
#### theta_max = arctan(0.5)

M_exit = np.linspace(1,3,100)
theta_1 = np.arctan(0.5*((1+0.2*(M_exit**2))/(1.2*(M_exit**(1/3))))**3 - 0.5)
dummy = 0.5*((1+0.2*(M_exit**2))/(1.2*(M_exit**(1/3))))**3 - 0.5
##plt.plot(dummy, M_exit, label="M_exit versus Tan of Ramp angle")
##plt.plot(0.5*np.ones_like(M_exit), M_exit, label="maximum possible Tangent of Ramp angle")
#plt.ylabel("Mach number at nozzle exit")
#plt.xlabel("Tangent of Nozzle Ramp angle")
#plt.title("Mach number at nozzle exit versus Ramp angle with a linear area variation")
#plt.show()

### The intersection of the two plots gives us the maximum possible mach number
### at the Nozzle exit under the given assumptions and considerations. Hence we can conclude
### that under the given conditions the maximum possible mach number which can be achieved at the nozzle exit
### is around 2 ~ 2.5

##----------------------------THE END------------------------------------------

# A4 = 0.5
# A5 = A4 + xtan(theta)
# cowl_length = 1m
# M4 = 1
# Throat Area = A4 = 0.5
# M5 = formula

A4 = 0.2572448937
A5 = 1.0
M4 = 2.195747757
M5 = np.linspace(1,7,100)
gamma = 1.3
area_ratio = (M4/M5)*(((1+((gamma-1)/2)*M5**2)/(1+((gamma-1)/2)*M4**2))**((gamma+1)/(2*(gamma-1))))

area_ratio[np.where(M5==2.2)]

#plt.plot(area_ratio, M5)
#plt.axvline(x=4, color='r')
#plt.axhline(y=2.94, color = 'g')
#plt.xlabel('Area Ratio (A5/A4)')
#plt.ylabel('Mach number')

tot_t = 3243.158867
tot_p = 286969.3713
R = 287.1
p_0 = 805 # p_0 is the ambient pressure = 1atm
m_dot = ((A4*tot_p)/np.sqrt(tot_t))*(np.sqrt(gamma/R))*(((gamma+1)/2)**(-(gamma+1)/(2*(gamma-1))))
exit_t = tot_t/(1+((gamma-1)/2*(M5**2)))
exit_p = tot_p/((1+(((gamma-1)/2)*(M5**2)))**(gamma/(gamma-1)))
exit_area = area_ratio*A4
exit_vel = M5*np.sqrt(gamma*R*exit_t)
thrust = m_dot*exit_vel + (exit_p-p_0)*exit_area

#plt.plot(M5,thrust)
#plt.xlabel('Exit Mach Number')
#plt.ylabel('Thrust')

"""## SERN - Single Expansion Ramp Nozzle"""

epsilon = 0.1
A4 = 0.5
A5 = 1.0
M4 = 1
gamma = 1.4
M5 = np.linspace(1,3,100)

A5_new = A5 + epsilon*A5
area_ratio_new = area_ratio/(1+epsilon)

#plt.plot(area_ratio_new, M5)
#plt.axvline(x=4.4, color='r')
#plt.axhline(y=2.94, color = 'g')
#plt.xlabel('Area Ratio')
#plt.ylabel('Mach number')

"""# Variation of mach number with epsilon values

Here we assume the combustor angle to be 3 degrees. Length of the combustor is taken to be 1.2m. Hence we have combustor entry area = 0.0894 and combustor exit area = 0.2572448937 ~ 0.26

> Hence nozzle entry area is 0.26 and nozzle exit area without **SERN** is 1. Hence area ratio is $\frac{A_5}{A_4} = \frac{1}{0.26} = 3.846. Also, mach number at nozzle entry is M4 = 2.195747757 ~ 2.2


-- [Soham]
"""

old_area_ratio = 3.846
M4, gamma = 2.2, 1.4
mach_num = np.linspace(1,5,100)

#inter1 is area_ratio_new
inter1 = (1/mach_num)*(((1 + 0.2*mach_num*mach_num)/(1 + 0.2*M4*M4))**((gamma + 1)/(2*(gamma-1))))

#Epsilon is the SERN values
epsilon = 0.5*inter1 - 1

# Epsilon is always greater than zero.

#plt.plot(epsilon, mach_num, label="variation of mach number with epsilon")
#plt.axvline(x=0.1, label="Epsilon = 0.1",color='red')
#plt.axvline(x=0.2, label="Epsilon = 0.2",color='blue')
#plt.xlim(0)
#plt.title("Single Ramp Expansion Nozzle - SERN Analysis")
#plt.legend()
#plt.xlabel("Values of epsilon")
#plt.ylabel("Values of mach numbers at exit")
#plt.show()

#plt.plot(inter1, mach_num)
#plt.title("Variation of mach number at exit ratio with area ratio")
#plt.xlabel("Values of Area Ratio")
#plt.ylabel("Mach numbers at the exit")
#plt.show()

"""# Variation of Thrust with epsilon in SERN
 From combustor calculations we get that the total pressure at the combustor exit is $P_{t4} =286969.3713 Pa ~ $

 And the ambient pressure is given $P_0 = 805 Pa$. Hence we can calculate the static pressure at nozzle exit with the total pressure formula.

 Also, we have the total temperature $T_{t4} = 3243.158867$, and we have the ambient temperature as given value $T_0 = 230 K$.
"""

gamma = 1.4
R = 287.1

P_t4 = 286969.3713
P_5 = P_t4 / (1 + (0.2*mach_num*mach_num))**3

T_t4 = 3243.158867
T_5 = T_t4 /(1 + (0.2*mach_num*mach_num))

#velocity at nozzle exit
vel5 = mach_num * np.sqrt(gamma * R * T_5)
A5 = 1 #area at nozzle exit


#ambient velocity (velocity at intake entry)
M0 = 6.2  #Mach number at intake entry
T0 = 230  #Temperature at intake entry
P0 = 805  #Pressure at intake entry
A0 = 1    #Area at intake entry (capture area)
vel0 = M0 * np.sqrt(gamma*R*T0)
mass_flow_0 = (P0*A0*vel0)/(R*T0)

thrust = mass_flow_0 * (vel5 - vel0) + (1 + epsilon)*(P_5 - P0)*A5

#plt.plot(epsilon, thrust, label="Epsilon vs Thrust")
#plt.title("Variation of thrust with Epsilon considering SERN")
#plt.xlabel("Values of epsilon")
#plt.ylabel("Values of thrust")
#plt.xlim(0)
#plt.ylim(11000)
#plt.legend()
#plt.show()

#plt.plot(mach_num, thrust, label="Mach number vs Thrust")
#plt.title("Variation of Thrust with Mach number")
#plt.xlabel("Values of Mach number")
#plt.ylabel("Values of thrust")
#plt.xlim(1)
#plt.legend()
#plt.show()
